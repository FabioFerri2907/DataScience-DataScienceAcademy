main = "MediaConsumoEnergia X Capacidade Bateria",
col.main = "red", ylab = "MediaConsumoEnergia", xlab = "capacidadeBateria")
#  Capacidade Bateria X Autonomia X Fabricante
# Audi, BMW, Citroen, DS, Honda e Hynday são os fabricantes que mais tem autonomia de uso acima de 400KM
ggplot(df_dados, aes(x = CapacidadeBateria, y = Autonomia, colour = Fabricante)) +
geom_point()
# Capacidade de Bateria X Autonomia
# Quanto maior a capacidade de bateria maior a autonomia
ggplot(df_dados, aes(x = CapacidadeBateria, y = Autonomia, colour = Modelo)) +
geom_point()
# Maior parte dos veículos tem autonomia acima de 200 Km e  50O KM ,
# custam até 400.000
ggplot(df_dados, aes(x = PrecoMIn, y = Autonomia, colour = Modelo)) +
geom_point()
# Agrupando os dados e calculando média  Energy consumption [kWh/100 km]
# group_by()
df_dados %>%
group_by(Modelo) %>%
summarise(avg_MediaConsumoEnergia = mean(MediaConsumoEnergia),
min_MediaConsumoEnergia = min(MediaConsumoEnergia),
max_MediaConsumoEnergia = max(MediaConsumoEnergia),
total = n())
# Carros Unicos
carros = df_dados$CarroNome
unique(carros)
# Modelos
Fabricante = df_dados$Fabricante
unique(Fabricante)
# Carro mais economico
Carro_min <- df_dados %>%
group_by(Modelo) %>%
summarise(min_value = min(MediaConsumoEnergia))
# Carro mais consumo
Carro_max <- df_dados %>%
group_by(Modelo) %>%
summarise(max_value = max(MediaConsumoEnergia))
Carro_max
# Construção do boxplot
MediaConsumoEnergiaboxplot = boxplot(data = df_dados, MediaConsumoEnergia  ~ factor(Fabricante) ,
main = "MediaConsumoEnergia",
col.main = "red", ylab = "MediaConsumoEnergia", xlab = "Fabricante")
# randomForest para encontrar as variáveis mais relevantes
regressor <- randomForest( MediaConsumoEnergia ~ . , data = numeric_data, importance=TRUE) # fit the random forest with default parameter
caret::varImp(regressor)
# Depois de executar o Randomforest, encontramos as variaveis mais relevantes a variaval target
##################################  OverallPrecoMIn    7.503244
#MotorKM            4.976540
#TorqueMax          5.546578
#CapacidadeBateria  4.319913
#Autonomia          2.743444
##################################  DistanciaEixosCM  10.847786
##################################  TamCM              8.913345
##################################  LarguraCM          5.956610
#ComprimentoCM      1.857416
##################################  PesoVazio          6.816251
##################################  PesoMax            9.963957
##################################  CapacidadeMaxima   6.496824
#NumBancos          2.702918
#NumPortas         -1.246418
##################################  TamPneu            5.077130
#VelocidadeMax      4.324391
#CapacidadeIni      4.305913
#Acceleracao0100    2.326368
#Torque             2.838302
# Seleciona Colunas
df_dados_model <- numeric_data %>%
select( PrecoMIn, DistanciaEixosCM , DistanciaEixosCM,TamCM,LarguraCM,PesoVazio,PesoMax,CapacidadeMaxima,TamPneu, MediaConsumoEnergia)
View(df_dados_model)
# Normalizar Dados
normalizar <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df_dados_norm <- as.data.frame(lapply(df_dados_model, normalizar))
str(df_dados_norm)
View(df_dados_norm)
# ---------------------------------------------------------------------------------------------------------------------------
##### Modelos  #####
# ---------------------------------------------------------------------------------------------------------------------------
# Modelo 1
# Treinos e Teste
split <- createDataPartition(y = df_dados_model$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model[split,]
dados_teste <- df_dados_model[-split,]
# Treino 1 modelo
modelo_v1 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v1)
#colocar o gráfico de curcva de erro
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v1)
plot(vimp)
#PrecoMIn         3.54113987
#DistanciaEixosCM 0.18599072
#TamCM            1.37321574
#LarguraCM        1.37760304
#PesoVazio        1.68842605
#PesoMax          0.13567274
#CapacidadeMaxima 0.07599211
#TamPneu          3.43723349
# Primeiro modelo r-squared 0.92 92% e p-value de 2.472e-10 baixo.
# O modelo 1 para esta com um bom desempenho de 92%
# Variáveis mais relevantes são PrecoMIn,TamPneu, PesoVazio e LarguraCM
# Previsoes
?predict
predictedValues <- predict(modelo_v1, dados_teste)
predictedValues
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 1") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
# Modelo 2
# Mostrando a importância das variáveis para a criação do modelo 1
# Seleciona Colunas Modelo 2
df_dados_model2 <- numeric_data %>%
select( PrecoMIn, TamCM, LarguraCM,PesoVazio,MediaConsumoEnergia)
View(df_dados_model2)
# Treinos e Teste
split <- createDataPartition(y = df_dados_model2$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model2[split,]
dados_teste <- df_dados_model2[-split,]
# Treino 2 modelo
modelo_v2 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v2)
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v2)
plot(vimp)
# Previsoes
?predict
predictedValues <- predict(modelo_v2, dados_teste)
predictedValues
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 2") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
hist(df_dados$MediaConsumoEnergia)
# Construção do boxplot
MediaConsumoEnergiaboxplot = boxplot(data = df_dados, MediaConsumoEnergia  ~ factor(Fabricante) ,
main = "MediaConsumoEnergia",
col.main = "red", ylab = "MediaConsumoEnergia", xlab = "Fabricante")
mean(df_dados$PrecoMIn)
median(df_dados$PrecoMIn)
range(df_dados$PrecoMIn)
# Calcula mean squared error
mse <- mean((dados_teste$MediaConsumoEnergia - predictedValues)^2)
print(mse)
rmse = sqrt(mse)
print(rmse)
alues
mae(dados_teste$MediaConsumoEnergia, predictedValues))
mae(dados_teste$MediaConsumoEnergia, predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
MSE(dados_teste$MediaConsumoEnergia - predictedValues)
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
View(df_dados_model)
?poly
View(df_dados_model)
View(df_dados_model[1:8])
modelo_v3  = lm(MediaConsumoEnergia ~ poly(df_dados_model[1:8],2, raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly(df_dados_model[1:8], raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly(df_dados_model[1:8],2, raw=T), data=dados_treino)
View(dados_treino[1:8])
View(dados_treino[1:8])
View(dados_treino[1:8])
View(dados_treino)
View(df_dados_norm)
# Modelo 1
# Treinos e Teste
split <- createDataPartition(y = df_dados_norm$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_norm[split,]
dados_teste <- df_dados_norm[-split,]
# Treino 1 modelo
modelo_v1 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v1)
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v1)
plot(vimp)
# Previsoes
?predict
predictedValues <- predict(modelo_v1, dados_teste)
predictedValues
# Calcula Acuracidade
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 1") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
df_dados_model2 <- numeric_data %>%
select( PrecoMIn, TamCM, LarguraCM,PesoVazio,MediaConsumoEnergia)
View(df_dados_model2)
# Treinos e Teste
split <- createDataPartition(y = df_dados_model2$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model2[split,]
dados_teste <- df_dados_model2[-split,]
# Treino 2 modelo
modelo_v2 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v2)
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v2)
plot(vimp)
# Previsoes
?predict
predictedValues <- predict(modelo_v2, dados_teste)
predictedValues
# Calcula Acuracidade
# MSE 3.747484
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
# RMSE 1.935842
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
# MAE 1.57556
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
# r_square 0.7541232 Modelo com 75%
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 2") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
# Modelo 1
# Treinos e Teste
split <- createDataPartition(y = df_dados_model$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model[split,]
dados_teste <- df_dados_model[-split,]
# Treino 1 modelo
modelo_v1 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v1)
#colocar o gráfico de curcva de erro
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v1)
plot(vimp)
#PrecoMIn         3.54113987
#DistanciaEixosCM 0.18599072
#TamCM            1.37321574
#LarguraCM        1.37760304
#PesoVazio        1.68842605
#PesoMax          0.13567274
#CapacidadeMaxima 0.07599211
#TamPneu          3.43723349
# Primeiro modelo r-squared 0.92 92% e p-value de 2.472e-10 baixo.
# O modelo 1 para esta com um bom desempenho de 92%
# Variáveis mais relevantes são PrecoMIn,TamPneu, PesoVazio e LarguraCM
# Previsoes
?predict
predictedValues <- predict(modelo_v1, dados_teste)
predictedValues
# Calcula Acuracidade
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 1") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
modelo_v3  = lm(MediaConsumoEnergia ~ poly(dados_treino[1:8],2, raw=T), data=dados_treino)
View(dados_treino)
View(dados_treino[1:8])
modelo_v3  = lm(MediaConsumoEnergia ~ poly(dados_treino[1:8],2, raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly(PrecoMin,2, raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly( PrecoMin ~ TamCM ,2, raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly( PrecoMin ,1, raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly(PrecoMin ,1, raw=T), data=dados_treino)
modelo_v3  = lm(MediaConsumoEnergia ~ poly(dados_treino$PrecoMin ,1, raw=T), data=dados_treino)
# Treinos e Teste
split <- createDataPartition(y = df_dados_model$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model[split,]
dados_teste <- df_dados_model[-split,]
# Treino 1 modelo
modelo_v1 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v1)
#colocar o gráfico de curcva de erro
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v1)
plot(vimp)
#PrecoMIn         3.54113987
#DistanciaEixosCM 0.18599072
#TamCM            1.37321574
#LarguraCM        1.37760304
#PesoVazio        1.68842605
#PesoMax          0.13567274
#CapacidadeMaxima 0.07599211
#TamPneu          3.43723349
# Primeiro modelo r-squared 0.92 92% e p-value de 2.472e-10 baixo.
# O modelo 1 para esta com um bom desempenho de 92%
# Variáveis mais relevantes são PrecoMIn,TamPneu, PesoVazio e LarguraCM
# Previsoes
?predict
predictedValues <- predict(modelo_v1, dados_teste)
predictedValues
# Calcula Acuracidade
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 1") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
# Mostrando a importância das variáveis para a criação do modelo 1
# Seleciona Colunas Modelo 2 somente com as variávies com maior correlação do Modelo 1
df_dados_model2 <- numeric_data %>%
select( PrecoMIn, TamCM, LarguraCM,PesoVazio,MediaConsumoEnergia)
View(df_dados_model2)
# Treinos e Teste
split <- createDataPartition(y = df_dados_model2$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model2[split,]
dados_teste <- df_dados_model2[-split,]
# Treino 2 modelo
modelo_v2 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v2)
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v2)
plot(vimp)
# Previsoes
?predict
predictedValues <- predict(modelo_v2, dados_teste)
predictedValues
# Calcula Acuracidade
# MSE 3.747484
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
# RMSE 1.935842
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
# MAE 1.57556
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
# r_square 0.7541232 Modelo com 75%
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 2") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
# Mostrando a importância das variáveis para a criação do modelo 1
# Seleciona Colunas Modelo 2 somente com as variávies com maior correlação do Modelo 1
df_dados_model2 <- numeric_data %>%
select( PrecoMIn, TamCM, LarguraCM,PesoVazio,MediaConsumoEnergia)
View(df_dados_model2)
# Treinos e Teste
split <- createDataPartition(y = df_dados_model2$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model2[split,]
dados_teste <- df_dados_model2[-split,]
# Treino 2 modelo
modelo_v2 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v2)
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v2)
plot(vimp)
# Previsoes
?predict
predictedValues <- predict(modelo_v2, dados_teste)
predictedValues
# Calcula Acuracidade
# MSE 3.747484
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
# RMSE 1.935842
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
# MAE 1.57556
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
# r_square 0.7541232 Modelo com 75%
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 2") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
# Previsoes
?predict
predictedValues <- predict(modelo_v2, dados_teste)
predictedValues
# Calcula Acuracidade
# MSE 3.747484
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
# RMSE 1.935842
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
# MAE 1.57556
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
# r_square 0.7541232 Modelo com 75%
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 2") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
plot(modelo_v2)
# Treinos e Teste
split <- createDataPartition(y = df_dados_model$MediaConsumoEnergia, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model[split,]
dados_teste <- df_dados_model[-split,]
# Treino 1 modelo
modelo_v1 <- lm(MediaConsumoEnergia ~ ., data = dados_treino)
# Summary 1 Modelo
summary(modelo_v1)
# Plot Modelo 1
plot(modelo_v1)
# Importancia de Variável
#varimp(modelo_v1)
vimp  <- caret::varImp(modelo_v1)
plot(vimp)
#PrecoMIn         3.54113987
#DistanciaEixosCM 0.18599072
#TamCM            1.37321574
#LarguraCM        1.37760304
#PesoVazio        1.68842605
#PesoMax          0.13567274
#CapacidadeMaxima 0.07599211
#TamPneu          3.43723349
# Primeiro modelo r-squared 0.92 92% e p-value de 2.472e-10 baixo.
# O modelo 1 para esta com um bom desempenho de 92%
# Variáveis mais relevantes são PrecoMIn,TamPneu, PesoVazio e LarguraCM
# Previsoes
?predict
predictedValues <- predict(modelo_v1, dados_teste)
predictedValues
# Calcula Acuracidade
MSE(dados_teste$MediaConsumoEnergia, predictedValues)
RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
MAE(dados_teste$MediaConsumoEnergia, predictedValues)
R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
# Plot Teste X Previsto
ggplot(data = dados_teste , aes(x = MediaConsumoEnergia , y = predictedValues)) +
ggtitle("Plot Comparativo  Teste X Previsto Modelo 1") +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)  +
xlab("Valores Previstos") + ylab("Dados Testes")
modelo_v1_mse   <- MSE(dados_teste$MediaConsumoEnergia, predictedValues)
modelo_v1_rmse  <- RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
modelo_v1_mae   <- MAE(dados_teste$MediaConsumoEnergia, predictedValues)
modelo_v1_r2    <- R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
modelo_v2_mse   <- MSE(dados_teste$MediaConsumoEnergia, predictedValues)
modelo_v2_mse   <- RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
modelo_v2_mae   <- MAE(dados_teste$MediaConsumoEnergia, predictedValues)
modelo_v2_r2    <- R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
modelo_v1 = c(modelo_v1_mse,modelo_v1_rmse,modelo_v1_mae, modelo_v1_r2)
modelo_v1 = c(modelo_v1_mse,modelo_v1_rmse,modelo_v1_mae, modelo_v1_r2)
modelo_v2 = c(modelo_v2_mse,modelo_v2_rmse,modelo_v2_mae, modelo_v2_r2)
modelo_v2_mse   <- MSE(dados_teste$MediaConsumoEnergia, predictedValues)
modelo_v2_rmse   <- RMSE(dados_teste$MediaConsumoEnergia,predictedValues)
modelo_v2_mae   <- MAE(dados_teste$MediaConsumoEnergia, predictedValues)
modelo_v2_r2    <- R2(dados_teste$MediaConsumoEnergia, predictedValues, form = "traditional")
modelo_v1 = c(modelo_v1_mse,modelo_v1_rmse,modelo_v1_mae, modelo_v1_r2)
modelo_v2 = c(modelo_v2_mse,modelo_v2_rmse,modelo_v2_mae, modelo_v2_r2)
# ---------------------------------------------------------------------------------------------------------------------------
model_desc = c("MSE","RMSE","MAE","R2")
modelo_v1 = c(modelo_v1_mse,modelo_v1_rmse,modelo_v1_mae, modelo_v1_r2)
modelo_v2 = c(modelo_v2_mse,modelo_v2_rmse,modelo_v2_mae, modelo_v2_r2)
result <- as.data.frame(cbind(model_desc, modelo_v1))
result_v1 <- as.data.frame(cbind(model_desc, modelo_v1))
result_v2 <- as.data.frame(cbind(model_desc, modelo_v2))
result_v1 <- as.data.frame(cbind(model_desc, modelo_v1))
result_v2 <- as.data.frame(cbind(model_desc, modelo_v2))
result_model = merge(result_v1,result_v2)
result_model
model_desc = c("MSE","RMSE","MAE","R2")
modelo_v1 = c(modelo_v1_mse,modelo_v1_rmse,modelo_v1_mae, modelo_v1_r2)
modelo_v2 = c(modelo_v2_mse,modelo_v2_rmse,modelo_v2_mae, modelo_v2_r2)
result_v1 <- as.data.frame(cbind(model_desc, modelo_v1))
result_v2 <- as.data.frame(cbind(model_desc, modelo_v2))
result_model = merge(result_v1,result_v2)
result_model
result_v1
result_v1
result_v2
