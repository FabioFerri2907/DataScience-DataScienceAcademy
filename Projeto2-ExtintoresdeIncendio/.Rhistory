# Quanto Maior o Fluxo de AR Mais e Mais DISEBEL mais teve Sucesso
ggplot(data = df_dados,
aes(x = DESIBEL, y = AIRFLOW,
colour = as.factor(STATUS))) + geom_point()
# Fluxo de Ar x sTATUS
# 888888888888888888888888888888888 Existem outliear devem ser removidos 888888888888888888888888888888888888888888
AIRFLOWxSTATUSboxplot = boxplot(data = df_dados, AIRFLOW  ~ factor(STATUS) ,
main = "Fluxo de Ar X Status",
col.main = "red", ylab = "Fluxo de Ar", xlab = "Status")
# Seleciona Colunas
# HHHHH falta colocar o combustivel categorica ***8888888888888888888888888888888
df_dados_model <- numeric_data %>%
select( SIZE, FUEL, DISTANCE, DISTANCE, AIRFLOW , FREQUENCY, STATUS )
# Plot composto por varias variaveis
xyplot(AIRFLOW ~  DISTANCE | SIZE , groups = STATUS,
data = numeric_data, auto.key = list(space="right"))
plot(df_dados$AIRFLOW, df_dados$STATUS)
cor.test(df_dados$AIRFLOW, df_dados$STATUS, method = "pearson")
AIRFLOWxSTATUSboxplot = boxplot(data = df_dados, AIRFLOW  ~ factor(STATUS) ,
main = "Fluxo de Ar X Status",
col.main = "red", ylab = "Fluxo de Ar", xlab = "Status")
# Quanto Maior o Fluxo de AR Mais e Mais DISEBEL mais teve Sucesso
ggplot(data = df_dados,
aes(x = DESIBEL, y = AIRFLOW,
colour = as.factor(STATUS))) + geom_point()
dt_fuel <- as.data.frame(fuel_table)
dt_fuel
str(categorical_data)
# Convert Campos Fator
df_dados$FUEL <- as.factor(df_dados$FUEL)
levels(df_dados$FUEL)
summary(df_dados$FUEL)
# Convert Campos Fator
df_dados$FUEL <- factor(df_dados$FUEL)
levels(df_dados$FUEL)
summary(df_dados$FUEL)
# Convert Campos Fator
df_dados$FUEL <-  as.numeric(factor(df_dados$FUEL))
levels(df_dados$FUEL)
summary(df_dados$FUEL)
str(df_dados)
# Mini-Projeto_2 - Machine Learning em Prevendo Funcionamento Extintor Hidrostático
# Curso1-BigDataAzureMachineLearning
# Julho/2023
# Fabio Ferri
# ---------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------
##### Problema de Negócio #####
# ---------------------------------------------------------------------------------------------------------------------------
#Usando dados reais disponíveis publicamente, seu trabalho é desenvolver um modelo
#de Machine Learning capaz de prever a eficiência de extintores de incêndio.
#O teste hidrostático extintor é um procedimento estabelecido pelas normas da ABNT
##NBR 12962/2016, que determinam que todos os extintores devem ser testados a cada cinco
#anos, com a finalidade de identificar eventuais vazamentos, além de também verificar a
#resistência do material do extintor.
#Com isso, o teste hidrostático extintor pode ser realizado em baixa e alta pressão, de
#acordo com estas normas em questão. O procedimento é realizado por profissionais técnicos
#da área e com a utilização de aparelhos específicos e apropriados para o teste, visto que eles
#devem fornecer resultados com exatidão.
# Os tipo e combust[iveis tem medidas diferentes separar na Análise
# ---------------------------------------------------------------------------------------------------------------------------
##### Instala os pacotes #####
# ---------------------------------------------------------------------------------------------------------------------------
setwd("C:/Users/FFERRI/Documents/Desenvolvimento/DataScienceAcademy/FormacaoCietistadeDados/Curso1-BigDataAzureMachineLearning/20-ProjetosComFeedback/Projetos-1-2/Projeto2-ExtintoresdeIncendio")
getwd()
library("caret")
library("readxl")
library("corrplot")
library("dplyr")
library("ggplot2")
library("randomForest")
library("varImp")
library("readxl")
library(e1071)
library(Metrics)
#install.packages('knitr', dependencies = TRUE)
# ---------------------------------------------------------------------------------------------------------------------------
##### Análise Exploratória dos Dados - Limpeza dos Dados #####
# ---------------------------------------------------------------------------------------------------------------------------
# Importando uma worksheet para um dataframe
df_dados <- read_excel("dataset/Extinguisher_Fire.xlsx", sheet = 1)
View(df_dados)
# Variáveis e tipos de dados
str(df_dados)
# Sumários das variáveis numéricas
summary(df_dados)
# Nomes das colunas
colnames(df_dados)
# Verificando ocorrência de valores NA
colSums(is.na(df_dados))
sum(is.na(df_dados))
any(is.na(df_dados))
#df_dados <- na.omit(df_dados)
sum(is.na(df_dados))
# Quantas linhas tem casos completos?
complete_cases <- sum(complete.cases(df_dados))
# Quantas linhas tem casos incompletos?
not_complete_cases <- sum(!complete.cases(df_dados))
# Qual o percentual de dados incompletos?
percentual <- (not_complete_cases / complete_cases) * 100
percentual
# Sem Dados nulos, a análise pode ser seguida em frente
# Remover NA ( Não existem Dados nulos)
#df_dados <- na.omit(df_dados)
# Remove os objetos anteriores para liberar memória RAM
rm(complete_cases)
rm(not_complete_cases)
# Convert Campos Fator
df_dados$FUEL <-  as.numeric(factor(df_dados$FUEL))
levels(df_dados$FUEL)
summary(df_dados$FUEL)
str(df_dados)
# Extraindo as variáveis numéricas
numeric_vars <- sapply(df_dados, is.numeric)
numeric_data <- df_dados[, numeric_vars]
str(numeric_data)
# Extraindo as variáveis  categóricas
categorical_vars <- !numeric_vars
categorical_data <- df_dados[, categorical_vars]
str(categorical_data)
# Medindo as amplitudes-----------------------------
summary(numeric_data)
# Variável dependente Target STATUS é Varável Qualitativa Ordinal
# A Variável Target 0 indicates the non-extinction state, 1 indicates the extinction state
# Variável FUEL
fuel_table <- table(df_dados$FUEL)
barchart(fuel_table)
# Construindo o Barplot
barplot(fuel_table, beside = T)
barplot(fuel_table)
hist(fuel_table, labels = T,  breaks = 10, main = "Histograma de Combustiveis ")
View(fuel_table)
dt_fuel <- as.data.frame(fuel_table)
dt_fuel
dt_fuel %>%
mutate(percent = Freq / sum(Freq)  )
head
# Variável independente  Distancia
range(numeric_data$DISTANCE)
# Ramge Min 10 Max 190 cm
mean(numeric_data$DISTANCE)
# média 100
median(numeric_data$DISTANCE)
# Mediana 100
sd(numeric_data$DISTANCE)
# Desviio Padrão  54.77383
var(numeric_data$DISTANCE)
# Variancia 3000.172
hist(numeric_data$DISTANCE, breaks = 8)
# Variável independente  DISEBEL
range(numeric_data$DESIBEL)
# Ramge Min 72 Max 113 dcb
mean(numeric_data$DESIBEL)
# média 96.37914
median(numeric_data$DESIBEL)
# Mediana 95
sd(numeric_data$DESIBEL)
# Desviio Padrão  54.77383
var(numeric_data$DESIBEL)
# Variancia 66.65247
hist(numeric_data$DESIBEL, breaks = 8)
# Matriz de Correlação
cor(numeric_data)
# Graficos em Pairs mostram se todas as variveis tem correção, exemplpo pode ser positiva , qd uma aumenta a outra aumenta, mas
# não pode ter onde uma aumenta e outra diminiu
# Correlation Plot
pairs(numeric_data)
# Plot composto por varias variaveis
xyplot(AIRFLOW ~  DISTANCE | SIZE , groups = STATUS,
data = numeric_data, auto.key = list(space="right"))
# AIRFLOW X DISTANCE  tem correlação Negativa, quanto maior a distancia menor o fluxo de ar.
ggplot(data = df_dados,
aes(x = AIRFLOW, y = DISTANCE,
colour = as.factor(STATUS))) + geom_point()
# Sem correlação FLUXO DE AR e TAMANHO
ggplot(data = df_dados,
aes(x = AIRFLOW, y = SIZE,
colour = as.factor(STATUS))) + geom_point()
# Quanto Maior o Fluxo de AR Mais e Mais DISEBEL mais teve Sucesso
ggplot(data = df_dados,
aes(x = DESIBEL, y = AIRFLOW,
colour = as.factor(STATUS))) + geom_point()
# Quanto Maior o Fluxo de AR Mais e Mais DISEBEL mais teve Sucesso
ggplot(data = df_dados,
aes(x = DESIBEL, y = AIRFLOW,
colour = as.factor(STATUS))) + geom_point()
# Fluxo de Ar x sTATUS
# 888888888888888888888888888888888 Existem outliear devem ser removidos 888888888888888888888888888888888888888888
AIRFLOWxSTATUSboxplot = boxplot(data = df_dados, AIRFLOW  ~ factor(STATUS) ,
main = "Fluxo de Ar X Status",
col.main = "red", ylab = "Fluxo de Ar", xlab = "Status")
# Seleciona Colunas
# HHHHH falta colocar o combustivel categorica ***8888888888888888888888888888888
df_dados_model <- numeric_data %>%
select( SIZE, FUEL, DISTANCE, DISTANCE, AIRFLOW , FREQUENCY, STATUS )
View(df_dados_model)
# Normalizar Dados
normalizar <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df_dados_norm <- as.data.frame(lapply(df_dados_model, normalizar))
str(df_dados_norm)
View(df_dados_norm)
df_dados_model <- numeric_data %>%
select( SIZE, FUEL, DISTANCE, DISTANCE, AIRFLOW , FREQUENCY, STATUS )
View(df_dados_model)
normalizar <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df_dados_norm <- as.data.frame(lapply(df_dados_model, normalizar))
str(df_dados_norm)
View(df_dados_norm)
library("caret")
library("readxl")
library("corrplot")
library("dplyr")
library("ggplot2")
library("randomForest")
library("varImp")
library("readxl")
library(e1071)
library(Metrics)
library(gmodels)
# Modelo 1
# Treinos e Teste
split <- createDataPartition(y = df_dados_model$STATUS, p = 0.7, list = FALSE)
# Split dados
dados_treino <- df_dados_model[split,]
dados_teste <- df_dados_model[-split,]
# Verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
library("caret")
library("readxl")
library("corrplot")
library("dplyr")
library("ggplot2")
library("randomForest")
library("varImp")
library("readxl")
library(e1071)
library(Metrics)
library(gmodels)
library(class)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
# Verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
#cl = dados_treino_labels,
k = 21)
# Criando os labels para os dados de treino e de teste
dados_treino_labels <- dados[1:469, 1]
# Criando os labels para os dados de treino e de teste
dados_treino_labels <- df_dados[1:469, 1]
dados_teste_labels <- df_dados[470:569, 1]
length(dados_treino_labels)
length(dados_teste_labels)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
dim(df_dados)
# Criando os labels para os dados de treino e de teste
dados_treino_labels <- df_dados[1:12210, 1]
dados_teste_labels <- df_dados[12211:17442, 1]
length(dados_treino_labels)
length(dados_teste_labels)
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
# Criando dados de treino e dados de teste
dados_treino <- df_dados_model[1:12210, ]
dados_teste <- df_dados_model[12211:17442, ]
# Verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
# Criando os labels para os dados de treino e de teste
dados_treino_labels <- df_dados[1:12210, 1]
dados_teste_labels <- df_dados[12211:17442, 1]
length(dados_treino_labels)
length(dados_teste_labels)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
# Mini-Projeto_2 - Machine Learning em Prevendo Funcionamento Extintor Hidrostático
# Curso1-BigDataAzureMachineLearning
# Julho/2023
# Fabio Ferri
# ---------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------
##### Problema de Negócio #####
# ---------------------------------------------------------------------------------------------------------------------------
#Usando dados reais disponíveis publicamente, seu trabalho é desenvolver um modelo
#de Machine Learning capaz de prever a eficiência de extintores de incêndio.
#O teste hidrostático extintor é um procedimento estabelecido pelas normas da ABNT
##NBR 12962/2016, que determinam que todos os extintores devem ser testados a cada cinco
#anos, com a finalidade de identificar eventuais vazamentos, além de também verificar a
#resistência do material do extintor.
#Com isso, o teste hidrostático extintor pode ser realizado em baixa e alta pressão, de
#acordo com estas normas em questão. O procedimento é realizado por profissionais técnicos
#da área e com a utilização de aparelhos específicos e apropriados para o teste, visto que eles
#devem fornecer resultados com exatidão.
# Os tipo e combust[iveis tem medidas diferentes separar na Análise
# ---------------------------------------------------------------------------------------------------------------------------
##### Instala os pacotes #####
# ---------------------------------------------------------------------------------------------------------------------------
setwd("C:/Users/FFERRI/Documents/Desenvolvimento/DataScienceAcademy/FormacaoCietistadeDados/Curso1-BigDataAzureMachineLearning/20-ProjetosComFeedback/Projetos-1-2/Projeto2-ExtintoresdeIncendio")
getwd()
library("caret")
library("readxl")
library("corrplot")
library("dplyr")
library("ggplot2")
library("randomForest")
library("varImp")
library("readxl")
library(e1071)
library(Metrics)
library(gmodels)
library(class)
#install.packages('knitr', dependencies = TRUE)
# ---------------------------------------------------------------------------------------------------------------------------
##### Análise Exploratória dos Dados - Limpeza dos Dados #####
# ---------------------------------------------------------------------------------------------------------------------------
# Importando uma worksheet para um dataframe
df_dados <- read_excel("dataset/Extinguisher_Fire.xlsx", sheet = 1)
View(df_dados)
# Variáveis e tipos de dados
str(df_dados)
# Sumários das variáveis numéricas
summary(df_dados)
# Tamanho Dataset
dim(df_dados)
# Nomes das colunas
colnames(df_dados)
# Verificando ocorrência de valores NA
colSums(is.na(df_dados))
sum(is.na(df_dados))
any(is.na(df_dados))
#df_dados <- na.omit(df_dados)
sum(is.na(df_dados))
# Quantas linhas tem casos completos?
complete_cases <- sum(complete.cases(df_dados))
# Quantas linhas tem casos incompletos?
not_complete_cases <- sum(!complete.cases(df_dados))
# Qual o percentual de dados incompletos?
percentual <- (not_complete_cases / complete_cases) * 100
percentual
# Sem Dados nulos, a análise pode ser seguida em frente
# Remover NA ( Não existem Dados nulos)
#df_dados <- na.omit(df_dados)
# Remove os objetos anteriores para liberar memória RAM
rm(complete_cases)
rm(not_complete_cases)
# Convert Campos Fator
df_dados$FUEL <-  as.numeric(factor(df_dados$FUEL))
levels(df_dados$FUEL)
summary(df_dados$FUEL)
str(df_dados)
# Extraindo as variáveis numéricas
numeric_vars <- sapply(df_dados, is.numeric)
numeric_data <- df_dados[, numeric_vars]
str(numeric_data)
# Extraindo as variáveis  categóricas
categorical_vars <- !numeric_vars
categorical_data <- df_dados[, categorical_vars]
str(categorical_data)
# Medindo as amplitudes-----------------------------
summary(numeric_data)
# Variável dependente Target STATUS é Varável Qualitativa Ordinal
# A Variável Target 0 indicates the non-extinction state, 1 indicates the extinction state
# Variável FUEL
fuel_table <- table(df_dados$FUEL)
barchart(fuel_table)
# Construindo o Barplot
barplot(fuel_table, beside = T)
barplot(fuel_table)
hist(fuel_table, labels = T,  breaks = 10, main = "Histograma de Combustiveis ")
View(fuel_table)
dt_fuel <- as.data.frame(fuel_table)
dt_fuel
dt_fuel %>%
mutate(percent = Freq / sum(Freq)  )
head
# Variável independente  Distancia
range(numeric_data$DISTANCE)
# Ramge Min 10 Max 190 cm
mean(numeric_data$DISTANCE)
# média 100
median(numeric_data$DISTANCE)
# Mediana 100
sd(numeric_data$DISTANCE)
# Desviio Padrão  54.77383
var(numeric_data$DISTANCE)
# Variancia 3000.172
hist(numeric_data$DISTANCE, breaks = 8)
# Variável independente  DISEBEL
range(numeric_data$DESIBEL)
# Ramge Min 72 Max 113 dcb
mean(numeric_data$DESIBEL)
# média 96.37914
median(numeric_data$DESIBEL)
# Mediana 95
sd(numeric_data$DESIBEL)
# Desviio Padrão  54.77383
var(numeric_data$DESIBEL)
# Variancia 66.65247
hist(numeric_data$DESIBEL, breaks = 8)
# Matriz de Correlação
cor(numeric_data)
# Graficos em Pairs mostram se todas as variveis tem correção, exemplpo pode ser positiva , qd uma aumenta a outra aumenta, mas
# não pode ter onde uma aumenta e outra diminiu
# Correlation Plot
pairs(numeric_data)
# Plot composto por varias variaveis
xyplot(AIRFLOW ~  DISTANCE | SIZE , groups = STATUS,
data = numeric_data, auto.key = list(space="right"))
# AIRFLOW X DISTANCE  tem correlação Negativa, quanto maior a distancia menor o fluxo de ar.
ggplot(data = df_dados,
aes(x = AIRFLOW, y = DISTANCE,
colour = as.factor(STATUS))) + geom_point()
# Sem correlação FLUXO DE AR e TAMANHO
ggplot(data = df_dados,
aes(x = AIRFLOW, y = SIZE,
colour = as.factor(STATUS))) + geom_point()
# Quanto Maior o Fluxo de AR Mais e Mais DISEBEL mais teve Sucesso
ggplot(data = df_dados,
aes(x = DESIBEL, y = AIRFLOW,
colour = as.factor(STATUS))) + geom_point()
# Quanto Maior o Fluxo de AR Mais e Mais DISEBEL mais teve Sucesso
ggplot(data = df_dados,
aes(x = DESIBEL, y = AIRFLOW,
colour = as.factor(STATUS))) + geom_point()
# Fluxo de Ar x sTATUS
# 888888888888888888888888888888888 Existem outliear devem ser removidos 888888888888888888888888888888888888888888
AIRFLOWxSTATUSboxplot = boxplot(data = df_dados, AIRFLOW  ~ factor(STATUS) ,
main = "Fluxo de Ar X Status",
col.main = "red", ylab = "Fluxo de Ar", xlab = "Status")
# Seleciona Colunas
# HHHHH falta colocar o combustivel categorica ***8888888888888888888888888888888
df_dados_model <- numeric_data %>%
select( SIZE, FUEL, DISTANCE, DISTANCE, AIRFLOW , FREQUENCY, STATUS )
View(df_dados_model)
# Normalizar Dados
normalizar <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
df_dados_model <- as.data.frame(lapply(df_dados_model, normalizar))
str(df_dados_model)
View(df_dados_model)
# ---------------------------------------------------------------------------------------------------------------------------
##### Modelos  #####
# ---------------------------------------------------------------------------------------------------------------------------
# Modelo 1
# Treinos e Teste
split <- createDataPartition(y = df_dados_model$STATUS, p = 0.7, list = FALSE)
# Split dados
#dados_treino <- df_dados_model[split,]
#dados_teste <- df_dados_model[-split,]
# Criando dados de treino e dados de teste
dados_treino <- df_dados_model[1:12210, ]
dados_teste <- df_dados_model[12211:17442, ]
# Verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
# Criando os labels para os dados de treino e de teste
dados_treino_labels <- df_dados[1:12210, 1]
dados_teste_labels <- df_dados[12211:17442, 1]
length(dados_treino_labels)
length(dados_teste_labels)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
# Criando dados de treino e dados de teste
dados_treino <- df_dados_model[1:12210, ]
dados_teste <- df_dados_model[12211:17442, ]
# Verificando o numero de linhas
nrow(dados_treino)
nrow(dados_teste)
# Criando os labels para os dados de treino e de teste
dados_treino_labels <- df_dados_model[1:12210, 1]
dados_teste_labels <- df_dados_model[12211:17442, 1]
length(dados_treino_labels)
length(dados_teste_labels)
# Criando o modelo
modelo_knn_v1 <- knn(train = dados_treino,
test = dados_teste,
cl = dados_treino_labels,
k = 21)
# Summary 1 Modelo
summary(modelo_knn_v1)
# Criando uma tabela cruzada dos dados previstos x dados atuais
# Usaremos amostra com 100 observações: length(dados_teste_labels)
CrossTable(x = dados_teste_labels, y = modelo_knn_v1, prop.chisq = FALSE)
